
/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const fs = require('fs');
  const path = require('path');
  const { v4: uuidv4 } = require('uuid');
  const port = 3000;
  const app = express();

  app.use(express.json());

  const todosFilePath = path.join(__dirname, 'todos.json');
  
  const loadTodos = () => {
    try {
      const todoData = fs.readFileSync(todosFilePath,"utf-8");
      return JSON.parse(todoData) || [];
    } catch {
      console.log("Error")
    }
  }

  const todos = loadTodos();

  app.get("/todos",(req,res)=>{
    if(todos.length <= 0 ){
      res.json("No Todos Found");
    }
    res.status(200).json(todos);
  })

  app.get("/todos/:id",(req,res)=>{
    const id = req.params.id;
    const todo = todos.filter((todo)=> todo.id === id);
    if(todo.length <= 0 ){
      res.status(404).send("Requested Todo not found");
    }
    res.status(200).json(todo);
  })

  app.post("/todos",(req,res)=>{
    const title = req.body.title;
    if(!title){
      return res.status(400).json({ error: 'Title is required' });
    }
    const id = uuidv4();
    const newTodo = {
      title,
      id,
    }
    todos.push(newTodo);
    const todosData = JSON.stringify(todos, null, 2);
    fs.writeFileSync(todosFilePath, todosData);
    res.status(201).json(newTodo);
  })

  app.put("/todos/:id", (req, res) => {
    const id = req.params.id;
    const newTitle = req.body.newTitle;
  
    // Find the index of the todo with the given id
    const todoIndex = todos.findIndex((todo) => todo.id === id);
  
    if (todoIndex === -1) {
      // If the todo is not found, return 404 Not Found
      return res.status(404).send("Requested Todo not found");
    }
  
    // Update the title of the todo
    todos[todoIndex].title = newTitle;
    /*
    [
      {title,id},{title,id}
    ]
     */
  
    // Save the updated todos array back to the file
    const todosData = JSON.stringify(todos, null, 2);
    fs.writeFileSync(todosFilePath, todosData);
  
    // Respond with a success message
    res.status(200).send("Edited Todo");
  });

  app.delete("/todos/:id",(req,res)=>{
    
    const id = req.params.id;
    if(!id){
      res.status(404).send("Id not there / Id Not Found");
    }

    //[{title,id},{title,id}]

    const newTodos = todos.filter((todo) => todo.id !== id);

    const todosDataToAdd = JSON.stringify(newTodos, null, 2);
    
    fs.writeFileSync(todosFilePath,todosDataToAdd);

    res.status(200).send("Deleted !!");
  })


  //MOCK DATA ON FRONTEND/WEB LIKE TODOS
  //BACKEND FILES IS PRESENT
  //POSTING DATA => ADD POST TO Mock Data and SEND TO SERVER (FS MODULES)
  //PUT DATA => Edit Mock Data and SEND TO SERVER (FS MODULES)
  //DELETE DATA => Filter Mock Data and SEND TO SERVER (FS MODULES)


  app.listen(port,()=>console.log(`Server listening on port ${port}`));
  
  module.exports = app;